{"version":3,"sources":["../../src/components/monitorable.js"],"names":["axon","require","module","exports","Base","Monitorable","startDiscovery","discovery","on","obj","adv","advertisement","type","key","startsWith","onMonitorAdded","monitorStatusPublisher","PubEmitterSocket","sock","set","statusInterval","discoveryOptions","monitorInterval","setInterval","onMonitorInterval","address","constructor","useHostNames","hostName","connect","port","socks","length","nodes","map","s","id","node","_host","remoteAddress","remotePort","emit","me"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU,MAAMC,WAAN,SAA0BD,IAA1B,CAA+B;AACtDE,EAAAA,cAAc,GAAG;AACb,UAAMA,cAAN;AAEA,SAAKC,SAAL,CAAeC,EAAf,CAAkB,OAAlB,EAA4BC,GAAD,IAAS;AAChC,YAAMC,GAAG,GAAGD,GAAG,CAACE,aAAhB;;AAEA,UAAID,GAAG,CAACE,IAAJ,IAAY,SAAZ,IAAyB,CAAC,KAAKD,aAAL,CAAmBE,GAAnB,CAAuBC,UAAvB,CAAkCJ,GAAG,CAACG,GAAtC,CAA9B,EAA0E;AACtE;AACH;;AAED,WAAKE,cAAL,CAAoBN,GAApB;AACH,KARD;AASH;;AAEDM,EAAAA,cAAc,CAACN,GAAD,EAAM;AAChB,QAAI,CAAC,KAAKO,sBAAV,EAAkC;AAC9B,WAAKA,sBAAL,GAA8B,IAAIhB,IAAI,CAACiB,gBAAT,EAA9B;AACA,WAAKD,sBAAL,CAA4BE,IAA5B,CAAiCC,GAAjC,CAAqC,eAArC,EAAsD,CAAtD;AACA,YAAMC,cAAc,GAAG,KAAKC,gBAAL,CAAsBD,cAAtB,IAAwC,IAA/D;AAEA,WAAKE,eAAL,GAAuBC,WAAW,CAAC,MAAM,KAAKC,iBAAL,EAAP,EAAiCJ,cAAjC,CAAlC;AACH;;AAED,QAAIK,OAAO,GAAGhB,GAAG,CAACgB,OAAlB;AACA,QAAI,KAAKC,WAAL,CAAiBC,YAArB,EAAmCF,OAAO,GAAGhB,GAAG,CAACmB,QAAd;AAEnC,SAAKZ,sBAAL,CAA4Ba,OAA5B,CAAoCpB,GAAG,CAACE,aAAJ,CAAkBmB,IAAtD,EAA4DL,OAA5D;AACH;;AAEDD,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKR,sBAAL,CAA4BE,IAA5B,CAAiCa,KAAjC,CAAuCC,MAA5C,EAAoD;AAEpD,UAAMC,KAAK,GAAG,CAAC,KAAKf,IAAL,CAAUa,KAAV,IAAmB,KAAKb,IAAL,CAAUA,IAAV,CAAea,KAAnC,EAA0CG,GAA1C,CAA+CC,CAAD,IAAO;AAC/D,UAAIA,CAAC,CAACC,EAAN,EAAU,OAAOD,CAAC,CAACC,EAAT;;AAEV,WAAK,MAAMA,EAAX,IAAiB,KAAK7B,SAAL,CAAe0B,KAAhC,EAAuC;AACnC,cAAMI,IAAI,GAAG,KAAK9B,SAAL,CAAe0B,KAAf,CAAqBG,EAArB,CAAb;;AAEA,YAAI,CAAC,KAAKV,WAAL,CAAiBC,YAAjB,GAAgCQ,CAAC,CAACG,KAAF,IAAWD,IAAI,CAACT,QAAhD,GAA2DO,CAAC,CAACI,aAAF,IAAmBF,IAAI,CAACZ,OAApF,KACAU,CAAC,CAACK,UAAF,IAAgBH,IAAI,CAAC1B,aAAL,CAAmBmB,IADvC,EAC6C;AACzCK,UAAAA,CAAC,CAACC,EAAF,GAAOC,IAAI,CAACD,EAAZ;AAEA,iBAAOD,CAAC,CAACC,EAAT;AACH;AACJ;AACJ,KAba,CAAd;AAeA,SAAKpB,sBAAL,CAA4ByB,IAA5B,CAAiC,QAAjC,EAA2C;AACvCL,MAAAA,EAAE,EAAE,KAAK7B,SAAL,CAAemC,EAAf,CAAkBN,EADiB;AAEvCH,MAAAA,KAAK,EAAEA;AAFgC,KAA3C;AAIH;;AApDqD,CAA1D","sourcesContent":["const axon = require('@dashersw/axon');\n\nmodule.exports = (Base) => class Monitorable extends Base {\n    startDiscovery() {\n        super.startDiscovery();\n\n        this.discovery.on('added', (obj) => {\n            const adv = obj.advertisement;\n\n            if (adv.type != 'monitor' || !this.advertisement.key.startsWith(adv.key)) {\n                return;\n            }\n\n            this.onMonitorAdded(obj);\n        });\n    }\n\n    onMonitorAdded(obj) {\n        if (!this.monitorStatusPublisher) {\n            this.monitorStatusPublisher = new axon.PubEmitterSocket();\n            this.monitorStatusPublisher.sock.set('retry timeout', 0);\n            const statusInterval = this.discoveryOptions.statusInterval || 5000;\n\n            this.monitorInterval = setInterval(() => this.onMonitorInterval(), statusInterval);\n        }\n\n        let address = obj.address;\n        if (this.constructor.useHostNames) address = obj.hostName;\n\n        this.monitorStatusPublisher.connect(obj.advertisement.port, address);\n    }\n\n    onMonitorInterval() {\n        if (!this.monitorStatusPublisher.sock.socks.length) return;\n\n        const nodes = (this.sock.socks || this.sock.sock.socks).map((s) => {\n            if (s.id) return s.id;\n\n            for (const id in this.discovery.nodes) {\n                const node = this.discovery.nodes[id];\n\n                if ((this.constructor.useHostNames ? s._host == node.hostName : s.remoteAddress == node.address) &&\n                    s.remotePort == node.advertisement.port) {\n                    s.id = node.id;\n\n                    return s.id;\n                }\n            }\n        });\n\n        this.monitorStatusPublisher.emit('status', {\n            id: this.discovery.me.id,\n            nodes: nodes,\n        });\n    }\n};\n"],"file":"monitorable.js"}