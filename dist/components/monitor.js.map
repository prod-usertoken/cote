{"version":3,"sources":["../../src/components/monitor.js"],"names":["portfinder","require","charm","Configurable","Component","axon","defaultOptions","monitor","log","module","exports","Monitor","constructor","advertisement","discoveryOptions","stream","type","sock","SubEmitterSocket","on","startDiscovery","status","emit","onPort","err","port","bind","server","code","getPort","host","address","disableScreen","interval","pipe","process","stdout","reset","erase","position","write","draw","index","foreground","move","discovery","eachNode","node","name","slice","length","id","setTimeout"],"mappings":"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","sourcesContent":["const portfinder = require('portfinder');\nconst charm = require('charm')();\nconst Configurable = require('./configurable');\nconst Component = require('./component');\nconst axon = require('@dashersw/axon');\n\nconst defaultOptions = {\n    monitor: true,\n    log: false,\n};\n\nmodule.exports = class Monitor extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions = {}, stream) {\n        advertisement.type = 'monitor';\n\n        discoveryOptions = { ...defaultOptions, ...discoveryOptions };\n\n        super(advertisement, discoveryOptions);\n\n        this.stream = stream;\n\n        this.sock = new axon.SubEmitterSocket();\n        this.sock.sock.on('bind', () => this.startDiscovery());\n\n        this.sock.on('status', (status) => this.emit('status', status));\n\n        const onPort = (err, port) => {\n            advertisement.port = +port;\n\n            this.sock.bind(port);\n            this.sock.sock.server.on('error', (err) => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({\n                    host: this.discoveryOptions.address,\n                    port: this.advertisement.port,\n                }, onPort);\n            });\n        };\n\n        portfinder.getPort({\n            host: this.discoveryOptions.address,\n            port: this.advertisement.port,\n        }, onPort);\n    }\n\n    startDiscovery() {\n        super.startDiscovery();\n\n        if (this.discoveryOptions.disableScreen) return;\n\n        const interval = this.discoveryOptions.interval || 5000;\n\n        charm.pipe(this.stream || process.stdout);\n        charm.reset().erase('screen').position(0, 0).\n            write('                                                                                    ');\n\n        const draw = () => {\n            charm.erase('screen');\n            let index = 3;\n            charm.position(0, 2);\n            charm.foreground('green').\n                write('Name').move(16).\n                write('id').move(37).\n                write('Address').move(11).\n                write('Port');\n\n            charm.erase('down');\n\n            this.discovery.eachNode((node) => {\n                let port = node.advertisement.port || '----';\n                port += '';\n                charm.position(0, index).foreground('cyan').\n                    write(node.advertisement.name.slice(0, 20)).move(20 - node.advertisement.name.length, 0).\n                    foreground('magenta').write(node.id).move(3, 0).\n                    foreground('yellow').write(node.address).move(3, 0).\n                    foreground('red').write(port);\n                index++;\n            });\n\n            charm.position(0, 1);\n\n            setTimeout(draw, interval);\n        };\n\n        draw();\n    }\n};\n"],"file":"monitor.js"}