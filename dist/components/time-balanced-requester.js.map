{"version":3,"sources":["../../src/components/time-balanced-requester.js"],"names":["Requester","require","_","uuid","module","exports","TimeBalancedRequester","constructor","advertisement","discoveryOptions","responders","timers","requestId","callbacks","MAX_REQUESTS","CALCULATION_TIMEOUT","SAMPLE_INTERVAL","setInterval","now","Date","index","id","sent","clearInterval","sock","on","responder","Error","reject","send","args","hasCallback","length","pop","resolve","Promise","_resolve","_reject","originalPromise","socks","len","minAvgResponseTime","Number","MAX_VALUE","minIndex","average","size","item","totalTime","request","time","findIndex","Math","floor","random","s","n","v4","cb","lastRequests","stats","averageTime","state","then","res","catch","err"],"mappings":"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","sourcesContent":["const Requester = require('./requester');\nconst _ = require('lodash');\nconst uuid = require('uuid');\n\nmodule.exports = class TimeBalancedRequester extends Requester {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.responders = {};\n        this.timers = {};\n        this.requestId = 0;\n        this.callbacks = {};\n        this.MAX_REQUESTS = 10;\n        this.CALCULATION_TIMEOUT = 10000;\n        this.SAMPLE_INTERVAL = 100;\n\n        // neglect requests from calculation this took longer then the given timeout\n        setInterval(() => {\n            const now = new Date();\n\n            for (const index in this.responders) {\n                for (const id in this.responders[index]) {\n                    if (now - this.responders[index][id].sent > this.CALCULATION_TIMEOUT) {\n                        if (this.timers[id]) {\n                            clearInterval(this.timers[id]);\n                        } // if the response is lost, don't leave garbage\n\n                        delete this.responders[index][id];\n                    }\n                }\n            }\n        }, this.SAMPLE_INTERVAL);\n\n        // clear all gathered data when a socket disconnects\n        this.sock.on('socket close', (sock) => {\n            if (sock.uuid) {\n                const responder = this.responders[sock.uuid];\n\n                for (const id in responder) { // clear timers and callbacks for the disconnected socket\n                    clearInterval(this.timers[id]);\n                    delete this.timers[id];\n\n                    if (typeof this.callbacks[id] == 'function') {\n                        this.callbacks[id](new Error('lost connection'));\n                    } else {\n                        this.callbacks[id] && this.callbacks[id].reject(new Error('lost connection'));\n                    }\n                    delete this.callbacks[id];\n                }\n                delete this.responders[sock.uuid];\n            }\n        });\n    }\n\n    send(...args) {\n        const id = this.requestId++;\n\n        const hasCallback = 'function' == typeof args[args.length - 1];\n        if (hasCallback) {\n            this.callbacks[id] = args.pop();\n        } else {\n            let resolve;\n            let reject;\n            this.callbacks[id] = new Promise((_resolve, _reject) => {\n                resolve = _resolve;\n                reject = _reject;\n            });\n\n            this.callbacks[id].resolve = resolve;\n            this.callbacks[id].reject = reject;\n        }\n\n        let originalPromise;\n\n        let index = 0;\n        const socks = this.sock.socks;\n        const len = socks.length;\n        let minAvgResponseTime = Number.MAX_VALUE;\n        let minIndex = 0;\n        let average = 0;\n\n        if (len > 0 && _.size(this.responders) == len) { // have data for all sockets\n            for (index in this.responders) {\n                const item = this.responders[index];\n                let totalTime = 0;\n\n                for (const request in item) {\n                    const time = item[request].time || 0;\n                    totalTime += time;\n                }\n                average = totalTime / _.size(item) || 0;\n\n                if (average < minAvgResponseTime) {\n                    minAvgResponseTime = average;\n                    minIndex = index;\n                }\n                this.responders[index].average = average;\n            }\n\n            minIndex = _.findIndex(socks, { uuid: minIndex });\n\n            // explore other servers every once in a while\n            if (id % this.MAX_REQUESTS == 0) {\n                minIndex = Math.floor(Math.random() * len);\n            }\n        } else if (len != 0) { // there is a new socket to be explored use it\n            minIndex = _.findIndex(socks, (s) => !s.uuid);\n        }\n\n        let n = this.sock.n = (minIndex % len) || 0; // select the socket to be used\n        if (!this.sock.socks[n]) n = this.sock.n = 0;\n        if (socks[n] && typeof socks[n].uuid == 'undefined') {\n            socks[n].uuid = uuid.v4();\n        } // assign a unique identifier to this socket\n\n        index = (socks[n] && socks[n].uuid) || 0; // save the index of selected socket\n\n        const cb = (...args) => {\n            const lastRequests = this.responders[index];\n            if (lastRequests && lastRequests[id]) {\n                lastRequests[id].time = (new Date() - lastRequests[id].sent);\n            } // save response time\n            clearInterval(this.timers[id]); // clear timers for this request\n            delete this.timers[id];\n\n            const stats = { averageTime: (lastRequests && lastRequests.average) || 0 };\n\n            if (hasCallback) {\n                this.callbacks[id](...args, stats);\n            } else {\n                if (originalPromise.state == 'rejected') this.callbacks[id].reject(args[0]);\n                else this.callbacks[id].resolve(args[0]);\n            }\n            delete this.callbacks[id];\n        };\n\n        if (index != 0) {\n            if (!this.responders[index]) this.responders[index] = {}; // create if it's the first request for this index\n            this.responders[index][id] = { // create a container object\n                time: 0,\n                sent: new Date(),\n            };\n\n            // increment responseTime of this request every 0.1 seconds\n            this.timers[id] = setInterval(() => {\n                const lastRequests = this.responders[index];\n                if (!lastRequests) return clearInterval(this.timers[id]);\n\n                if (lastRequests[id]) lastRequests[id].time += this.SAMPLE_INTERVAL;\n            }, this.SAMPLE_INTERVAL);\n        }\n\n        if (hasCallback) return super.send(...args, cb);\n        else {\n            originalPromise = super.send(...args);\n            originalPromise.then((res) => {\n                originalPromise.state = 'resolved';\n                cb(res);\n            }).catch((err) => {\n                originalPromise.state = 'rejected';\n                cb(err);\n            });\n            return this.callbacks[id];\n        }\n    };\n};\n"],"file":"time-balanced-requester.js"}